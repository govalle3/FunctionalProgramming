FUNCTIONAL PROGRAMMING

*FILTER: Es usado para filtrar una lista.

java.util.function
interface


* Function<T, R> Funcion que puede representar un argumento de entrada con uno de salida
	T es el tipo de variable de entrada y R es el tipo de variable de salida.
	
para llamar la function debemos volverla estatica, adicional a eso debemos añdir .apply despues de invocar el metodo 
para tomar los argumento actuales.

porque deberia usar la function de programacion funcional, todo será clarificado

.andThen

Digamos que se quieren multiples funciones juntas para lograr una salida deseada.

BiFunction: es lo mismo que una Function pero en vez de tomar una entrada toma 2 entradas y produce una salida.
Bi = "dos cosas"

BiFunction<Integer, Integer, Integer>, para este ejemplo se usan 2 entrada como entera y una salida en entero.
Depende del negocio se usarán distintos tipos de datos.

* Consumer, representa una operacion que acepta una entrada simple y retorna NADA
Es como una función VOID

* BI CONSUMER, representa una operación que acepta dos entradas simples y retorna NADA

*Predicate<T> = Es un predicado que representa un argumento (funcion de valor booleano)
En el ejemplo el parametro que recibe filter() es un predicado. Para el ejemplo tenemos "person -> FEMALE.equals(person.gender)"
Se pueden tener varios predicados que pueden ser combinados con otros predicados de las misma forma usando andThen.
        System.out.println(
                "Is phone number valid an contains number 3 = " +
                isPhoneNumberValidPredicate.and(containsNumber3).test("074080770000")
				
        );
	Para usarlos nombreMetodo.test
		
Supplier, Representar a un proveedor de resultados,  basicamente algunas veces tendremos metodos como obtener la url
de conexion a una BD, esto simplemente es un valor en string.
Para obtener el resulta hacer nombreMetodo.get()

STREAMS
	nos toma a un modo de abstracción
	
	stream.map realiza transformaciones
	
OPTIONALS
Esta funcion permite realizar funciones de si continene algo devuelva otra cosa.
.orElseThrow, es un proveedor que provee un valor definido


Combinator design pattern,
creamos un ejemplo de customer donde debemos realizar una serie de validacion de la informacion que un usuario
ingresa al sistema
No sabemos exactamente que sucede con nuestra validacion, asi que el combinator pattern es un patron que permite 
cambiar funciones juntas asi que basicamente un combinator es una funcion que podria tomar funciones como argumentos
y retorna nuevas funciones

CALL BACK LIKE JS

Pure functional programming has a set of rules to follow

- no state, no debe depende en un estado global.
- no side effects, no deberia tener efectos secundarios
solo debe exsitir dentro de la funcion
- higer order functions, se considera funciones de mayor rango se 
considera como 
* la funcion toma uno o mas funciones como parametros.
* la funcion retorna otra funcion como resultado.

	







