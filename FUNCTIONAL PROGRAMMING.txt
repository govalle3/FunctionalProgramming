FUNCTIONAL PROGRAMMING

*FILTER: Es usado para filtrar una lista.

java.util.function
interface


* Function<T, R> Funcion que puede representar un argumento de entrada con uno de salida
	T es el tipo de variable de entrada y R es el tipo de variable de salida.
	
para llamar la function debemos volverla estatica, adicional a eso debemos añdir .apply despues de invocar el metodo 
para tomar los argumento actuales.

porque deberia usar la function de programacion funcional, todo será clarificado

.andThen

Digamos que se quieren multiples funciones juntas para lograr una salida deseada.

BiFunction: es lo mismo que una Function pero en vez de tomar una entrada toma 2 entradas y produce una salida.
Bi = "dos cosas"

BiFunction<Integer, Integer, Integer>, para este ejemplo se usan 2 entrada como entera y una salida en entero.
Depende del negocio se usarán distintos tipos de datos.

* Consumer, representa una operacion que acepta una entrada simple y retorna NADA
Es como una función VOID

* BI CONSUMER, representa una operación que acepta dos entradas simples y retorna NADA

*Predicate<T> = Es un predicado que representa un argumento (funcion de valor booleano)
En el ejemplo el parametro que recibe filter() es un predicado. Para el ejemplo tenemos "person -> FEMALE.equals(person.gender)"
Se pueden tener varios predicados que pueden ser combinados con otros predicados de las misma forma usando andThen.
        System.out.println(
                "Is phone number valid an contains number 3 = " +
                isPhoneNumberValidPredicate.and(containsNumber3).test("074080770000")
        );
		








